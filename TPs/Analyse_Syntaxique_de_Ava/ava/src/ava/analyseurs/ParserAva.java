
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 13 18:07:11 CEST 2010
//----------------------------------------------------

package ava.analyseurs;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 13 18:07:11 CEST 2010
  */
public class ParserAva extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserAva() {super();}

  /** Constructor which sets the default scanner. */
  public ParserAva(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserAva(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\004\002\000\002\004\004\000\002\006\005" +
    "\000\002\007\003\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\005\002\000\002\005\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\012\005\000\002\013\010" +
    "\000\002\013\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\014\004\000\002\015" +
    "\007\000\002\015\011\000\002\016\007\000\002\022\003" +
    "\000\002\022\003\000\002\022\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\004\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\004\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\004\005\001\002\000\024\002\ufffe\005" +
    "\012\006\015\007\ufffe\010\ufffe\011\ufffe\012\ufffe\025\ufffe" +
    "\031\ufffe\001\002\000\004\023\010\001\002\000\004\002" +
    "\007\001\002\000\004\002\001\001\002\000\004\015\011" +
    "\001\002\000\024\002\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\025\uffff\031\uffff\001\002\000\004" +
    "\012\ufffb\001\002\000\020\002\ufff7\007\036\010\032\011" +
    "\025\012\030\025\033\031\027\001\002\000\024\002\ufffe" +
    "\005\012\006\015\007\ufffe\010\ufffe\011\ufffe\012\ufffe\025" +
    "\ufffe\031\ufffe\001\002\000\004\012\ufffa\001\002\000\004" +
    "\012\017\001\002\000\006\015\ufff8\016\022\001\002\000" +
    "\004\015\021\001\002\000\024\002\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\025\ufffc\031\ufffc\001" +
    "\002\000\004\012\017\001\002\000\004\015\ufff9\001\002" +
    "\000\020\002\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\025" +
    "\ufffd\031\ufffd\001\002\000\004\012\146\001\002\000\026" +
    "\002\ufff7\007\036\010\032\011\025\012\030\025\033\027" +
    "\ufff7\030\ufff7\031\027\033\ufff7\001\002\000\020\012\053" +
    "\013\057\035\061\037\064\052\063\055\056\056\054\001" +
    "\002\000\004\014\137\001\002\000\004\015\136\001\002" +
    "\000\006\015\uffee\035\uffec\001\002\000\020\012\053\013" +
    "\057\035\061\037\064\052\063\055\056\056\054\001\002" +
    "\000\004\015\126\001\002\000\004\015\125\001\002\000" +
    "\004\035\uffed\001\002\000\004\035\045\001\002\000\004" +
    "\015\044\001\002\000\004\015\043\001\002\000\004\002" +
    "\000\001\002\000\026\002\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\033\ufff2\001" +
    "\002\000\026\002\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\025\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1\001\002\000" +
    "\010\020\051\021\046\022\050\001\002\000\004\016\uffea" +
    "\001\002\000\004\016\052\001\002\000\004\016\uffe9\001" +
    "\002\000\004\016\uffeb\001\002\000\022\012\053\013\057" +
    "\023\055\035\061\037\064\052\063\055\056\056\054\001" +
    "\002\000\044\015\uffe1\026\uffe1\032\uffe1\034\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1\054\uffe1\001\002" +
    "\000\044\015\uffdd\026\uffdd\032\uffdd\034\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\053\uffdd\054\uffdd\001\002\000" +
    "\004\036\uffe7\001\002\000\044\015\uffde\026\uffde\032\uffde" +
    "\034\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\053\uffde" +
    "\054\uffde\001\002\000\044\015\uffe2\026\uffe2\032\uffe2\034" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054" +
    "\uffe2\001\002\000\036\034\076\036\uffe8\037\101\040\072" +
    "\041\071\042\074\044\100\045\104\046\077\047\103\050" +
    "\075\051\073\053\070\054\102\001\002\000\020\012\053" +
    "\013\057\035\061\037\064\052\063\055\056\056\054\001" +
    "\002\000\044\015\uffdf\026\uffdf\032\uffdf\034\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054\uffdf\001\002" +
    "\000\020\012\053\013\057\035\061\037\064\052\063\055" +
    "\056\056\054\001\002\000\020\012\053\013\057\035\061" +
    "\037\064\052\063\055\056\056\054\001\002\000\004\036" +
    "\066\001\002\000\004\015\uffef\001\002\000\044\015\uffd4" +
    "\026\uffd4\032\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\053\uffd4\054\uffd4\001\002\000\020\012\053\013" +
    "\057\035\061\037\064\052\063\055\056\056\054\001\002" +
    "\000\020\012\053\013\057\035\061\037\064\052\063\055" +
    "\056\056\054\001\002\000\020\012\053\013\057\035\061" +
    "\037\064\052\063\055\056\056\054\001\002\000\020\012" +
    "\053\013\057\035\061\037\064\052\063\055\056\056\054" +
    "\001\002\000\020\012\053\013\057\035\061\037\064\052" +
    "\063\055\056\056\054\001\002\000\020\012\053\013\057" +
    "\035\061\037\064\052\063\055\056\056\054\001\002\000" +
    "\020\012\053\013\057\035\061\037\064\052\063\055\056" +
    "\056\054\001\002\000\020\012\053\013\057\035\061\037" +
    "\064\052\063\055\056\056\054\001\002\000\020\012\053" +
    "\013\057\035\061\037\064\052\063\055\056\056\054\001" +
    "\002\000\020\012\053\013\057\035\061\037\064\052\063" +
    "\055\056\056\054\001\002\000\020\012\053\013\057\035" +
    "\061\037\064\052\063\055\056\056\054\001\002\000\020" +
    "\012\053\013\057\035\061\037\064\052\063\055\056\056" +
    "\054\001\002\000\020\012\053\013\057\035\061\037\064" +
    "\052\063\055\056\056\054\001\002\000\044\015\uffd2\026" +
    "\uffd2\032\uffd2\034\076\036\uffd2\037\101\040\072\041\071" +
    "\042\074\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\053\uffd2\054\uffd2\001\002\000\044\015\uffd0\026\uffd0" +
    "\032\uffd0\034\076\036\uffd0\037\101\040\072\041\071\042" +
    "\074\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\053\uffd0\054\uffd0\001\002\000\044\015\uffda\026\uffda\032" +
    "\uffda\034\076\036\uffda\037\101\040\072\041\071\042\074" +
    "\044\100\045\104\046\077\047\103\050\075\051\073\053" +
    "\070\054\uffda\001\002\000\044\015\uffd8\026\uffd8\032\uffd8" +
    "\034\076\036\uffd8\037\uffd8\040\uffd8\041\071\042\074\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8" +
    "\054\uffd8\001\002\000\044\015\uffd3\026\uffd3\032\uffd3\034" +
    "\076\036\uffd3\037\101\040\072\041\071\042\074\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\053\uffd3\054" +
    "\uffd3\001\002\000\044\015\uffd1\026\uffd1\032\uffd1\034\076" +
    "\036\uffd1\037\101\040\072\041\071\042\074\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1" +
    "\001\002\000\044\015\uffd5\026\uffd5\032\uffd5\034\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\053\uffd5\054\uffd5\001" +
    "\002\000\044\015\uffcf\026\uffcf\032\uffcf\034\076\036\uffcf" +
    "\037\101\040\072\041\071\042\074\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\053\uffcf\054\uffcf\001\002" +
    "\000\044\015\uffd6\026\uffd6\032\uffd6\034\076\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\053\uffd6\054\uffd6\001\002\000" +
    "\044\015\uffce\026\uffce\032\uffce\034\076\036\uffce\037\101" +
    "\040\072\041\071\042\074\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\053\uffce\054\uffce\001\002\000\044" +
    "\015\uffd9\026\uffd9\032\uffd9\034\076\036\uffd9\037\uffd9\040" +
    "\uffd9\041\071\042\074\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\053\uffd9\054\uffd9\001\002\000\044\015" +
    "\uffd7\026\uffd7\032\uffd7\034\076\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\053\uffd7\054\uffd7\001\002\000\044\015\uffdb" +
    "\026\uffdb\032\uffdb\034\076\036\uffdb\037\101\040\072\041" +
    "\071\042\074\044\100\045\104\046\077\047\103\050\075" +
    "\051\073\053\uffdb\054\uffdb\001\002\000\044\015\uffdc\026" +
    "\uffdc\032\uffdc\034\076\036\uffdc\037\101\040\072\041\071" +
    "\042\074\044\100\045\104\046\077\047\103\050\075\051" +
    "\073\053\uffdc\054\uffdc\001\002\000\036\034\076\036\124" +
    "\037\101\040\072\041\071\042\074\044\100\045\104\046" +
    "\077\047\103\050\075\051\073\053\070\054\102\001\002" +
    "\000\044\015\uffe0\026\uffe0\032\uffe0\034\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\053\uffe0\054\uffe0\001\002\000" +
    "\026\002\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\025\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\033\ufff5\001\002\000\026\002" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\025\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\033\ufff4\001\002\000\036\026\130\034" +
    "\076\037\101\040\072\041\071\042\074\044\100\045\104" +
    "\046\077\047\103\050\075\051\073\053\070\054\102\001" +
    "\002\000\022\007\036\010\032\011\025\012\030\025\033" +
    "\027\ufff7\030\ufff7\031\027\001\002\000\006\027\132\030" +
    "\133\001\002\000\020\007\036\010\032\011\025\012\030" +
    "\025\033\030\ufff7\031\027\001\002\000\004\015\uffe5\001" +
    "\002\000\004\030\135\001\002\000\004\015\uffe4\001\002" +
    "\000\026\002\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\025" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\033\ufff3\001\002\000\020" +
    "\012\053\013\057\035\061\037\064\052\063\055\056\056" +
    "\054\001\002\000\036\015\ufff0\034\076\037\101\040\072" +
    "\041\071\042\074\044\100\045\104\046\077\047\103\050" +
    "\075\051\073\053\070\054\102\001\002\000\036\032\142" +
    "\034\076\037\101\040\072\041\071\042\074\044\100\045" +
    "\104\046\077\047\103\050\075\051\073\053\070\054\102" +
    "\001\002\000\020\007\036\010\032\011\025\012\030\025" +
    "\033\031\027\033\ufff7\001\002\000\004\033\144\001\002" +
    "\000\004\015\uffe3\001\002\000\012\002\ufff6\027\ufff6\030" +
    "\ufff6\033\ufff6\001\002\000\004\015\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\002\005\003\003\001\001\000\010\004" +
    "\012\006\013\007\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\041\011\025\012\034" +
    "\013\033\014\030\015\040\016\037\017\036\001\001\000" +
    "\010\004\023\006\013\007\015\001\001\000\002\001\001" +
    "\000\004\010\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\144\011\025\012\034\013\033\014\030\015\040\016\037" +
    "\017\036\001\001\000\006\022\140\023\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\126\023\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\064\022\057\023\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\122\023\061" +
    "\001\001\000\002\001\001\000\006\022\121\023\061\001" +
    "\001\000\006\022\066\023\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\120\023" +
    "\061\001\001\000\006\022\117\023\061\001\001\000\006" +
    "\022\116\023\061\001\001\000\006\022\115\023\061\001" +
    "\001\000\006\022\114\023\061\001\001\000\006\022\113" +
    "\023\061\001\001\000\006\022\112\023\061\001\001\000" +
    "\006\022\111\023\061\001\001\000\006\022\110\023\061" +
    "\001\001\000\006\022\107\023\061\001\001\000\006\022" +
    "\106\023\061\001\001\000\006\022\105\023\061\001\001" +
    "\000\006\022\104\023\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\130\011\025\012" +
    "\034\013\033\014\030\015\040\016\037\017\036\001\001" +
    "\000\002\001\001\000\022\005\133\011\025\012\034\013" +
    "\033\014\030\015\040\016\037\017\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\137\023\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\142\011\025\012\034\013" +
    "\033\014\030\015\040\016\037\017\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserAva$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserAva$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserAva$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private boolean erreurSyntaxique;
private String messageErreur;

/** Redéfinition de la méthode parse() pour levée de
  * ParserException() en cas d'erreur syntaxique.
  * @throws ParserException en cas d'erreur syntaxique.
  */
public Symbol parse() throws Exception, ParserException {
   Symbol s = null;
   try {
     s = super.parse();
   } catch (Exception e) {
   	   if (this.erreurSyntaxique)
     	      throw new ParserException(this.messageErreur);
           else throw e;
   }
   return s;
}

/** Redéfinition de syntax_error() pour qu'elle affiche
  * le symbole courant.
  */
public void syntax_error(Symbol symboleCourant) {
    this.erreurSyntaxique = true;
    this.messageErreur = "erreur syntaxique sur le symbole "
    + ((Symbole)symboleCourant).getRepresentationTextuelle()
    + " ligne " + (symboleCourant.left + 1)
    + " colonne " + (symboleCourant.right + 1);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserAva$actions {
  private final ParserAva parser;

  /** Constructor */
  CUP$ParserAva$actions(ParserAva parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserAva$do_action(
    int                        CUP$ParserAva$act_num,
    java_cup.runtime.lr_parser CUP$ParserAva$parser,
    java.util.Stack            CUP$ParserAva$stack,
    int                        CUP$ParserAva$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserAva$result;

      /* select the action based on the action number */
      switch (CUP$ParserAva$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressionComparaison ::= expression EGAL expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expressionComparaison",17, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressionComparaison ::= expression SUPEGAL expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expressionComparaison",17, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressionComparaison ::= expression SUP expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expressionComparaison",17, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressionComparaison ::= expression INF expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expressionComparaison",17, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressionComparaison ::= expression INFEGAL expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expressionComparaison",17, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressionComparaison ::= expression DIFF expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expressionComparaison",17, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= MOINS expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression MODULO expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression MULT expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression MOINS expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= FAUX 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= VRAI 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expressionComparaison 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= OPENPARENTH expression CLOSEPARENTH 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= IDENT 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= ENTIER 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // structureIterative ::= WHILE expression LOOP listeInstruction ENDLOOP 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("structureIterative",12, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // structureConditionnelle ::= IF expression THEN listeInstruction ELSE listeInstruction ENDIF 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("structureConditionnelle",11, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // structureConditionnelle ::= IF expression THEN listeInstruction ENDIF 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("structureConditionnelle",11, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lecture ::= READ IDENT 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("lecture",10, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paramImpression ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("paramImpression",15, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramImpression ::= expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("paramImpression",15, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formatImpression ::= FORMATCHAINE 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("formatImpression",14, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formatImpression ::= FORMATBOOLEEN 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("formatImpression",14, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formatImpression ::= FORMATENTIER 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("formatImpression",14, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fonctionStdOut ::= WRITELN 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("fonctionStdOut",13, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fonctionStdOut ::= WRITE 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("fonctionStdOut",13, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // impression ::= WRITELN 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("impression",9, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // impression ::= fonctionStdOut OPENPARENTH formatImpression SEPVAR paramImpression CLOSEPARENTH 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("impression",9, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // affectation ::= IDENT AFF expression 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("affectation",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= structureIterative FININSTR 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= structureConditionnelle FININSTR 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= lecture FININSTR 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= impression FININSTR 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= affectation FININSTR 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listeInstruction ::= instruction listeInstruction 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeInstruction",3, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listeInstruction ::= 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeInstruction",3, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listeDeVariable ::= IDENT 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeDeVariable",6, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listeDeVariable ::= IDENT SEPVAR listeDeVariable 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeDeVariable",6, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarationDeType ::= DECLBOOL 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("declarationDeType",5, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarationDeType ::= DECLINT 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("declarationDeType",5, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarationVariable ::= declarationDeType listeDeVariable FININSTR 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("declarationVariable",4, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listeDeclaration ::= declarationVariable listeDeclaration 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeDeclaration",2, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listeDeclaration ::= 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeDeclaration",2, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // enTete ::= PROG STRING FININSTR 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("enTete",1, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CodeSourceAva ::= enTete listeDeclaration listeInstruction 
            {
              Object RESULT =null;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("CodeSourceAva",0, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CodeSourceAva EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		RESULT = start_val;
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserAva$parser.done_parsing();
          return CUP$ParserAva$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

