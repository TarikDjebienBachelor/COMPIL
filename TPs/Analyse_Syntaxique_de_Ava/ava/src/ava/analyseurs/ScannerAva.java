/* The following code was generated by JFlex 1.4.3 on 13/10/10 18:07 */

/*****************************************************
 * Analyseur lexical pour Ava
 * fichier de description pour JFlex
 * produit anLexAva/ScannerAva.java
 * Djebien Tarik
 * 20/09/2010
 ****************************************************/

/***********************************************************************
 * Première partie : code utilisateur inclus tel quel dans le fichier
 * .java généré. On met typiquement ici les déclarations de paquetage
 * (package) et les importations de classes (import).
 ***********************************************************************/

// déclaration du paquetage auquel appartient la classe générée
package ava.analyseurs;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/10/10 18:07 from the specification file
 * <tt>/home/tarik/Bureau/Analyse_Syntaxique_de_Ava/ava/spec/anLexAva.lex</tt>
 */
public class ScannerAva implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\3\1\2\1\0\1\3\1\1\16\21\4\0\1\3\1\0"+
    "\1\30\1\0\1\20\1\60\2\0\1\31\1\32\1\37\1\41\1\23"+
    "\1\27\1\0\1\40\12\22\1\25\1\24\1\42\1\26\1\43\2\0"+
    "\1\46\2\20\1\36\1\52\1\55\5\20\1\56\1\34\1\44\1\35"+
    "\2\20\1\47\1\57\1\45\1\51\5\20\1\0\1\61\2\0\1\20"+
    "\1\0\1\10\1\15\1\20\1\33\1\17\1\53\1\7\1\63\1\12"+
    "\2\20\1\16\1\11\1\13\1\6\1\4\1\20\1\5\1\54\1\14"+
    "\1\50\1\20\1\62\3\20\4\0\41\21\2\0\4\20\4\0\1\20"+
    "\2\0\1\21\7\0\1\20\4\0\1\20\5\0\27\20\1\0\37\20"+
    "\1\0\u013f\20\31\0\162\20\4\0\14\20\16\0\5\20\11\0\1\20"+
    "\21\0\130\21\5\0\23\21\12\0\1\20\13\0\1\20\1\0\3\20"+
    "\1\0\1\20\1\0\24\20\1\0\54\20\1\0\46\20\1\0\5\20"+
    "\4\0\202\20\1\0\4\21\3\0\105\20\1\0\46\20\2\0\2\20"+
    "\6\0\20\20\41\0\46\20\2\0\1\20\7\0\47\20\11\0\21\21"+
    "\1\0\27\21\1\0\3\21\1\0\1\21\1\0\2\21\1\0\1\21"+
    "\13\0\33\20\5\0\3\20\15\0\4\21\14\0\6\21\13\0\32\20"+
    "\5\0\13\20\16\21\7\0\12\22\4\0\2\20\1\21\143\20\1\0"+
    "\1\20\10\21\1\0\6\21\2\20\2\21\1\0\4\21\2\20\12\22"+
    "\3\20\2\0\1\20\17\0\1\21\1\20\1\21\36\20\33\21\2\0"+
    "\3\20\60\0\46\20\13\21\1\20\u014f\0\3\21\66\20\2\0\1\21"+
    "\1\20\20\21\2\0\1\20\4\21\3\0\12\20\2\21\2\0\12\22"+
    "\21\0\3\21\1\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\1\20\3\0\4\20\2\0\1\21\1\20\7\21\2\0\2\21"+
    "\2\0\3\21\11\0\1\21\4\0\2\20\1\0\3\20\2\21\2\0"+
    "\12\22\4\20\15\0\3\21\1\0\6\20\4\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\2\20\1\0\2\20\2\0\1\21"+
    "\1\0\5\21\4\0\2\21\2\0\3\21\13\0\4\20\1\0\1\20"+
    "\7\0\12\22\2\21\3\20\14\0\3\21\1\0\11\20\1\0\3\20"+
    "\1\0\26\20\1\0\7\20\1\0\2\20\1\0\5\20\2\0\1\21"+
    "\1\20\10\21\1\0\3\21\1\0\3\21\2\0\1\20\17\0\2\20"+
    "\2\21\2\0\12\22\1\0\1\20\17\0\3\21\1\0\10\20\2\0"+
    "\2\20\2\0\26\20\1\0\7\20\1\0\2\20\1\0\5\20\2\0"+
    "\1\21\1\20\6\21\3\0\2\21\2\0\3\21\10\0\2\21\4\0"+
    "\2\20\1\0\3\20\4\0\12\22\1\0\1\20\20\0\1\21\1\20"+
    "\1\0\6\20\3\0\3\20\1\0\4\20\3\0\2\20\1\0\1\20"+
    "\1\0\2\20\3\0\2\20\3\0\3\20\3\0\10\20\1\0\3\20"+
    "\4\0\5\21\3\0\3\21\1\0\4\21\11\0\1\21\17\0\11\22"+
    "\11\0\1\20\7\0\3\21\1\0\10\20\1\0\3\20\1\0\27\20"+
    "\1\0\12\20\1\0\5\20\4\0\7\21\1\0\3\21\1\0\4\21"+
    "\7\0\2\21\11\0\2\20\4\0\12\22\22\0\2\21\1\0\10\20"+
    "\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20\2\0\1\21"+
    "\1\20\7\21\1\0\3\21\1\0\4\21\7\0\2\21\7\0\1\20"+
    "\1\0\2\20\4\0\12\22\22\0\2\21\1\0\10\20\1\0\3\20"+
    "\1\0\27\20\1\0\20\20\4\0\6\21\2\0\3\21\1\0\4\21"+
    "\11\0\1\21\10\0\2\20\4\0\12\22\22\0\2\21\1\0\22\20"+
    "\3\0\30\20\1\0\11\20\1\0\1\20\2\0\7\20\3\0\1\21"+
    "\4\0\6\21\1\0\1\21\1\0\10\21\22\0\2\21\15\0\60\20"+
    "\1\21\2\20\7\21\4\0\10\20\10\21\1\0\12\22\47\0\2\20"+
    "\1\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20\6\0\4\20"+
    "\1\0\7\20\1\0\3\20\1\0\1\20\1\0\1\20\2\0\2\20"+
    "\1\0\4\20\1\21\2\20\6\21\1\0\2\21\1\20\2\0\5\20"+
    "\1\0\1\20\1\0\6\21\2\0\12\22\2\0\2\20\42\0\1\20"+
    "\27\0\2\21\6\0\12\22\13\0\1\21\1\0\1\21\1\0\1\21"+
    "\4\0\2\21\10\20\1\0\42\20\6\0\24\21\1\0\2\21\4\20"+
    "\4\0\10\21\1\0\44\21\11\0\1\21\71\0\42\20\1\0\5\20"+
    "\1\0\2\20\1\0\7\21\3\0\4\21\6\0\12\22\6\0\6\20"+
    "\4\21\106\0\46\20\12\0\51\20\7\0\132\20\5\0\104\20\5\0"+
    "\122\20\6\0\7\20\1\0\77\20\1\0\1\20\1\0\4\20\2\0"+
    "\7\20\1\0\1\20\1\0\4\20\2\0\47\20\1\0\1\20\1\0"+
    "\4\20\2\0\37\20\1\0\1\20\1\0\4\20\2\0\7\20\1\0"+
    "\1\20\1\0\4\20\2\0\7\20\1\0\7\20\1\0\27\20\1\0"+
    "\37\20\1\0\1\20\1\0\4\20\2\0\7\20\1\0\47\20\1\0"+
    "\23\20\16\0\11\22\56\0\125\20\14\0\u026c\20\2\0\10\20\12\0"+
    "\32\20\5\0\113\20\3\0\3\20\17\0\15\20\1\0\4\20\3\21"+
    "\13\0\22\20\3\21\13\0\22\20\2\21\14\0\15\20\1\0\3\20"+
    "\1\0\2\21\14\0\64\20\40\21\3\0\1\20\3\0\2\20\1\21"+
    "\2\0\12\22\41\0\3\21\2\0\12\22\6\0\130\20\10\0\51\20"+
    "\1\21\126\0\35\20\3\0\14\21\4\0\14\21\12\0\12\22\36\20"+
    "\2\0\5\20\u038b\0\154\20\224\0\234\20\4\0\132\20\6\0\26\20"+
    "\2\0\6\20\2\0\46\20\2\0\6\20\2\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\37\20\2\0\65\20\1\0\7\20"+
    "\1\0\1\20\3\0\3\20\1\0\7\20\3\0\4\20\2\0\6\20"+
    "\4\0\15\20\5\0\3\20\1\0\7\20\17\0\4\21\32\0\5\21"+
    "\20\0\2\20\23\0\1\20\13\0\4\21\6\0\6\21\1\0\1\20"+
    "\15\0\1\20\40\0\22\20\36\0\15\21\4\0\1\21\3\0\6\21"+
    "\27\0\1\20\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20"+
    "\6\0\1\20\1\0\1\20\1\0\1\20\1\0\4\20\1\0\3\20"+
    "\1\0\7\20\3\0\3\20\5\0\5\20\26\0\44\20\u0e81\0\3\20"+
    "\31\0\11\20\6\21\1\0\5\20\2\0\5\20\4\0\126\20\2\0"+
    "\2\21\2\0\3\20\1\0\137\20\5\0\50\20\4\0\136\20\21\0"+
    "\30\20\70\0\20\20\u0200\0\u19b6\20\112\0\u51a6\20\132\0\u048d\20\u0773\0"+
    "\u2ba4\20\u215c\0\u012e\20\2\0\73\20\225\0\7\20\14\0\5\20\5\0"+
    "\1\20\1\21\12\20\1\0\15\20\1\0\5\20\1\0\1\20\1\0"+
    "\2\20\1\0\2\20\1\0\154\20\41\0\u016b\20\22\0\100\20\2\0"+
    "\66\20\50\0\15\20\3\0\20\21\20\0\4\21\17\0\2\20\30\0"+
    "\3\20\31\0\1\20\6\0\5\20\1\0\207\20\2\0\1\21\4\0"+
    "\1\20\13\0\12\22\7\0\32\20\4\0\1\20\1\0\32\20\12\0"+
    "\132\20\3\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20\3\0"+
    "\2\20\3\0\2\20\22\0\3\21\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\14\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\2\3\1\14\1\15"+
    "\1\16\1\17\1\20\5\3\1\1\1\21\3\3\1\22"+
    "\3\3\1\23\7\3\1\24\2\0\1\25\1\0\1\3"+
    "\1\26\1\27\1\30\5\3\1\31\1\32\1\33\4\3"+
    "\1\34\1\35\1\36\1\37\6\3\2\40\1\25\6\3"+
    "\1\41\1\42\1\43\1\3\1\44\1\0\2\3\1\45"+
    "\1\0\6\3\2\0\1\46\1\3\1\0\1\47\1\50"+
    "\1\51\2\3\1\46\1\0\2\3\1\52\1\53\1\0"+
    "\1\54\1\55\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\234\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\64\0\64\0\u0340\0\64\0\u0374\0\u03a8\0\64"+
    "\0\64\0\u03dc\0\u0410\0\64\0\u0444\0\64\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\64\0\u0618"+
    "\0\u064c\0\u0680\0\u0138\0\u06b4\0\u06e8\0\u071c\0\u0138\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\64\0\u08bc"+
    "\0\u03a8\0\64\0\u08f0\0\u0924\0\64\0\64\0\64\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\64\0\64\0\64\0\u0a5c"+
    "\0\u0a90\0\u0ac4\0\u0af8\0\u0138\0\u0138\0\u0138\0\u0138\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\64\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0138\0\u0138"+
    "\0\u0138\0\u0e04\0\u0138\0\u0e38\0\u0e6c\0\u0ea0\0\u0138\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u0138\0\u10a8\0\u0c98\0\u0138\0\u10dc\0\u0138\0\u1110\0\u1144"+
    "\0\64\0\u1178\0\u11ac\0\u11e0\0\u0138\0\u0138\0\u1214\0\u0138"+
    "\0\u0138\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\10"+
    "\1\2\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\10\1\32\1\33\1\10\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\4\10\1\44"+
    "\1\10\1\45\2\10\1\46\1\47\1\50\1\10\66\0"+
    "\1\4\65\0\1\10\1\51\15\10\10\0\4\10\5\0"+
    "\14\10\2\0\2\10\4\0\13\10\1\52\3\10\10\0"+
    "\4\10\5\0\14\10\2\0\2\10\4\0\1\10\1\53"+
    "\15\10\10\0\4\10\5\0\14\10\2\0\2\10\4\0"+
    "\17\10\10\0\4\10\5\0\14\10\2\0\2\10\4\0"+
    "\7\10\1\54\7\10\10\0\4\10\5\0\14\10\2\0"+
    "\2\10\4\0\2\10\1\55\14\10\10\0\4\10\5\0"+
    "\14\10\2\0\2\10\4\0\7\10\1\56\7\10\10\0"+
    "\4\10\5\0\7\10\1\57\4\10\2\0\2\10\4\0"+
    "\2\10\1\60\14\10\10\0\4\10\5\0\14\10\2\0"+
    "\2\10\4\0\1\10\1\61\15\10\10\0\4\10\5\0"+
    "\14\10\2\0\1\10\1\62\4\0\2\10\1\63\14\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\4\0\2\10"+
    "\1\64\14\10\10\0\4\10\5\0\14\10\2\0\2\10"+
    "\4\0\7\10\1\65\2\10\1\66\4\10\10\0\4\10"+
    "\5\0\14\10\2\0\2\10\22\0\1\21\67\0\1\67"+
    "\64\0\1\70\34\0\1\71\2\0\25\71\1\72\30\71"+
    "\1\73\2\71\4\0\17\10\10\0\2\10\1\74\1\10"+
    "\5\0\14\10\2\0\2\10\4\0\17\10\10\0\4\10"+
    "\5\0\3\10\1\53\10\10\2\0\2\10\26\0\1\75"+
    "\63\0\1\76\63\0\1\77\41\0\17\10\10\0\2\10"+
    "\1\100\1\10\5\0\14\10\2\0\2\10\4\0\17\10"+
    "\10\0\4\10\5\0\3\10\1\101\10\10\2\0\2\10"+
    "\4\0\17\10\10\0\4\10\5\0\1\102\13\10\2\0"+
    "\2\10\4\0\4\10\1\103\12\10\10\0\4\10\5\0"+
    "\14\10\2\0\2\10\4\0\17\10\10\0\4\10\5\0"+
    "\2\10\1\104\11\10\2\0\2\10\12\0\1\105\2\0"+
    "\1\106\36\0\1\107\13\0\1\10\1\110\15\10\10\0"+
    "\4\10\5\0\14\10\2\0\1\10\1\111\4\0\2\10"+
    "\1\112\14\10\10\0\4\10\5\0\14\10\2\0\2\10"+
    "\4\0\4\10\1\113\12\10\10\0\4\10\5\0\14\10"+
    "\2\0\2\10\4\0\17\10\10\0\1\114\3\10\5\0"+
    "\14\10\2\0\2\10\4\0\17\10\10\0\1\115\3\10"+
    "\5\0\14\10\2\0\2\10\4\0\10\10\1\116\6\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\4\0\10\10"+
    "\1\117\6\10\10\0\4\10\5\0\14\10\2\0\2\10"+
    "\4\0\17\10\10\0\4\10\5\0\4\10\1\120\7\10"+
    "\2\0\2\10\4\0\13\10\1\121\3\10\10\0\4\10"+
    "\5\0\14\10\2\0\2\10\4\0\2\10\1\122\14\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\4\0\2\10"+
    "\1\123\14\10\10\0\4\10\5\0\14\10\2\0\2\10"+
    "\4\0\17\10\10\0\1\124\3\10\5\0\14\10\2\0"+
    "\2\10\4\0\17\10\10\0\4\10\5\0\10\10\1\125"+
    "\3\10\2\0\2\10\1\70\1\126\1\127\61\70\1\71"+
    "\2\0\25\71\1\130\30\71\1\73\2\71\4\0\17\10"+
    "\10\0\3\10\1\115\5\0\14\10\2\0\2\10\4\0"+
    "\17\10\10\0\4\10\5\0\1\10\1\117\12\10\2\0"+
    "\2\10\4\0\17\10\10\0\4\10\5\0\5\10\1\131"+
    "\6\10\2\0\2\10\4\0\17\10\10\0\3\10\1\114"+
    "\5\0\14\10\2\0\2\10\4\0\12\10\1\132\4\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\4\0\17\10"+
    "\10\0\4\10\5\0\12\10\1\133\1\10\2\0\2\10"+
    "\4\0\6\10\1\134\10\10\10\0\4\10\5\0\14\10"+
    "\2\0\2\10\4\0\6\10\1\135\10\10\10\0\4\10"+
    "\5\0\14\10\2\0\2\10\4\0\3\10\1\136\13\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\4\0\17\10"+
    "\10\0\1\137\3\10\5\0\14\10\2\0\2\10\4\0"+
    "\13\10\1\140\3\10\10\0\4\10\5\0\14\10\2\0"+
    "\2\10\4\0\7\10\1\141\7\10\10\0\4\10\5\0"+
    "\14\10\2\0\2\10\4\0\12\10\1\142\4\10\10\0"+
    "\4\10\5\0\14\10\2\0\2\10\4\0\1\143\16\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\1\0\3\144"+
    "\6\10\1\145\3\10\1\146\4\10\10\0\4\10\5\0"+
    "\14\10\2\0\2\10\4\0\13\10\1\147\3\10\10\0"+
    "\4\10\5\0\14\10\2\0\2\10\2\0\1\127\111\0"+
    "\1\72\30\0\1\150\6\0\17\10\10\0\4\10\5\0"+
    "\6\10\1\140\5\10\2\0\2\10\4\0\17\10\10\0"+
    "\4\10\5\0\10\10\1\151\3\10\2\0\2\10\4\0"+
    "\17\10\10\0\4\10\5\0\13\10\1\152\2\0\2\10"+
    "\4\0\10\10\1\153\6\10\10\0\4\10\5\0\14\10"+
    "\2\0\2\10\4\0\12\10\1\154\4\10\10\0\4\10"+
    "\5\0\14\10\2\0\2\10\4\0\1\10\1\155\15\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\4\0\13\10"+
    "\1\156\3\10\10\0\4\10\5\0\14\10\2\0\2\10"+
    "\1\0\3\144\6\0\1\157\3\0\1\160\51\0\17\10"+
    "\10\0\4\10\5\0\7\10\1\161\4\10\2\0\2\10"+
    "\4\0\2\10\1\162\14\10\10\0\4\10\5\0\14\10"+
    "\2\0\2\10\30\0\1\163\37\0\13\10\1\164\3\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\4\0\17\10"+
    "\10\0\4\10\5\0\6\10\1\164\5\10\2\0\2\10"+
    "\4\0\13\10\1\165\3\10\10\0\4\10\5\0\14\10"+
    "\2\0\2\10\4\0\13\10\1\166\3\10\10\0\4\10"+
    "\5\0\14\10\2\0\2\10\4\0\4\10\1\167\12\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\4\0\4\10"+
    "\1\170\12\10\10\0\4\10\5\0\14\10\2\0\2\10"+
    "\53\0\1\171\16\0\1\172\61\0\2\10\1\173\14\10"+
    "\10\0\4\10\5\0\14\10\2\0\2\10\4\0\12\10"+
    "\1\174\4\10\10\0\4\10\5\0\14\10\2\0\2\10"+
    "\4\0\5\10\1\175\11\10\10\0\4\10\5\0\14\10"+
    "\2\0\2\10\4\0\7\10\1\176\7\10\10\0\4\10"+
    "\5\0\14\10\2\0\2\10\6\0\1\177\61\0\1\200"+
    "\16\10\10\0\4\10\5\0\14\10\2\0\2\10\4\0"+
    "\7\10\1\201\7\10\10\0\4\10\5\0\14\10\2\0"+
    "\2\10\4\0\1\202\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\15\1\2\11\1\1\1\11"+
    "\2\1\2\11\2\1\1\11\1\1\1\11\10\1\1\11"+
    "\17\1\1\11\2\0\1\11\1\0\1\1\3\11\5\1"+
    "\3\11\17\1\1\11\14\1\1\0\3\1\1\0\6\1"+
    "\2\0\2\1\1\0\5\1\1\11\1\0\4\1\1\0"+
    "\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Symbole creerSymbole(String representation, int type) {
    return new Symbole(representation,type,yyline,yycolumn);
  }

  private Symbole creerSymbole(String representation, int type, Object valeur) {
    return new Symbole(representation,type,valeur,yyline,yycolumn);
  }  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerAva(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerAva(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, ScannerException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { // on a reconnu un ";"
  return creerSymbole("FININSTR",TypeSymboles.FININSTR);
          }
        case 46: break;
        case 29: 
          { // on a reconnu un mod
  return creerSymbole("MODULO",TypeSymboles.MODULO);
          }
        case 47: break;
        case 13: 
          { // on a reconnu un "/"
  return creerSymbole("DIV",TypeSymboles.DIV);
          }
        case 48: break;
        case 41: 
          { // on a reconnu un while
  return creerSymbole("WHILE",TypeSymboles.WHILE);
          }
        case 49: break;
        case 5: 
          { // on a reconnu un ","
  return creerSymbole("SEPVAR",TypeSymboles.SEPVAR);
          }
        case 50: break;
        case 16: 
          { // on a reconnu un ">"
  return creerSymbole("SUP",TypeSymboles.SUP);
          }
        case 51: break;
        case 33: 
          { // on a reconnu un read
  return creerSymbole("READ",TypeSymboles.READ);
          }
        case 52: break;
        case 15: 
          { // on a reconnu un "<"
  return creerSymbole("INF",TypeSymboles.INF);
          }
        case 53: break;
        case 31: 
          { // on a reconnu un "not"
  return creerSymbole("NOT",TypeSymboles.NOT);
          }
        case 54: break;
        case 25: 
          { // on a reconnu un " %i "
  return creerSymbole("FORMATENTIER",TypeSymboles.FORMATENTIER);
          }
        case 55: break;
        case 9: 
          { // on a reconnu un " " "
  return creerSymbole("GUILLEMET",TypeSymboles.GUILLEMET);
          }
        case 56: break;
        case 40: 
          { // on a reconnu un write
  return creerSymbole("WRITE",TypeSymboles.WRITE);
          }
        case 57: break;
        case 1: 
          { // erreur : .|\n désigne n'importe quel caractère non reconnu
      // par une des règles précédentes 
  throw new ScannerException("symbole inconnu, caractère " + yytext() + 
				 " ligne " + yyline + " colonne " + yycolumn);
          }
        case 58: break;
        case 19: 
          { // on a reconnu un if
  return creerSymbole("IF",TypeSymboles.IF);
          }
        case 59: break;
        case 32: 
          { // on a reconnu un "- -commentaire"
  // et on ne fait rien comme dans tout langage.
          }
        case 60: break;
        case 43: 
          { // on a reconnu le mot-clé boolean
  return creerSymbole("DECLBOOL",TypeSymboles.DECLBOOL);
          }
        case 61: break;
        case 2: 
          { /* on ignore les blancs */
          }
        case 62: break;
        case 21: 
          { // on a reconnu un " " "
  return creerSymbole("STRING",TypeSymboles.STRING);
          }
        case 63: break;
        case 34: 
          { // on a reconnu un TRUE
  return creerSymbole("VRAI",TypeSymboles.VRAI);
          }
        case 64: break;
        case 30: 
          { // on a reconnu le mot-clé int
  return creerSymbole("DECLINT",TypeSymboles.DECLINT);
          }
        case 65: break;
        case 45: 
          { // on a reconnu un writeln
  return creerSymbole("WRITELN",TypeSymboles.WRITELN);
          }
        case 66: break;
        case 8: 
          { // on a reconnu un "-"
  return creerSymbole("MOINS",TypeSymboles.MOINS);
          }
        case 67: break;
        case 11: 
          { // on a reconnu un ")"
  return creerSymbole("CLOSEPARENTH",TypeSymboles.CLOSEPARENTH);
          }
        case 68: break;
        case 4: 
          { // on a reconnu un entier
  return creerSymbole("ENTIER",TypeSymboles.ENTIER, new Integer(yytext()));
          }
        case 69: break;
        case 23: 
          { // on a reconnu un "<="
  return creerSymbole("INFEGAL",TypeSymboles.INFEGAL);
          }
        case 70: break;
        case 36: 
          { // on a reconnu un loop
  return creerSymbole("LOOP",TypeSymboles.LOOP);
          }
        case 71: break;
        case 3: 
          { // on a reconnu un identificateur
  return creerSymbole("IDENT",TypeSymboles.IDENT,yytext());
          }
        case 72: break;
        case 26: 
          { // on a reconnu un " %b "
  return creerSymbole("FORMATBOOLEEN",TypeSymboles.FORMATBOOLEEN);
          }
        case 73: break;
        case 20: 
          { // on a reconnu un opérateur d'affectation
  return creerSymbole("AFF",TypeSymboles.AFF);
          }
        case 74: break;
        case 42: 
          { // on a reconnu le mot-clé program
  return creerSymbole("PROG",TypeSymboles.PROG);
          }
        case 75: break;
        case 18: 
          { // on a reconnu un or
  return creerSymbole("OR",TypeSymboles.OR);
          }
        case 76: break;
        case 27: 
          { // on a reconnu un " %s "
  return creerSymbole("FORMATCHAINE",TypeSymboles.FORMATCHAINE);
          }
        case 77: break;
        case 35: 
          { // on a reconnu un then
  return creerSymbole("THEN",TypeSymboles.THEN);
          }
        case 78: break;
        case 10: 
          { // on a reconnu un "("
  return creerSymbole("OPENPARENTH",TypeSymboles.OPENPARENTH);
          }
        case 79: break;
        case 44: 
          { // on a reconnu un endloop
  return creerSymbole("ENDLOOP",TypeSymboles.ENDLOOP);
          }
        case 80: break;
        case 37: 
          { // on a reconnu un else
  return creerSymbole("ELSE",TypeSymboles.ELSE);
          }
        case 81: break;
        case 39: 
          { // on a reconnu un FALSE
  return creerSymbole("FAUX",TypeSymboles.FAUX);
          }
        case 82: break;
        case 24: 
          { // on a reconnu un ">="
  return creerSymbole("SUPEGAL",TypeSymboles.SUPEGAL);
          }
        case 83: break;
        case 12: 
          { // on a reconnu un "*"
  return creerSymbole("MULT",TypeSymboles.MULT);
          }
        case 84: break;
        case 38: 
          { // on a reconnu un end if
  return creerSymbole("ENDIF",TypeSymboles.ENDIF);
          }
        case 85: break;
        case 28: 
          { // on a reconnu un and
  return creerSymbole("AND",TypeSymboles.AND);
          }
        case 86: break;
        case 7: 
          { // on a reconnu un "="
  return creerSymbole("EGAL",TypeSymboles.EGAL);
          }
        case 87: break;
        case 14: 
          { // on a reconnu un "+"
  return creerSymbole("PLUS",TypeSymboles.PLUS);
          }
        case 88: break;
        case 17: 
          { // on a reconnu un " \ "
  return creerSymbole("CANCEL",TypeSymboles.CANCEL);
          }
        case 89: break;
        case 22: 
          { // on a reconnu un "/="
  return creerSymbole("DIFF",TypeSymboles.DIFF);
          }
        case 90: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new Symbole(TypeSymboles.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
