
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 16 20:46:52 CET 2010
//----------------------------------------------------

package ava.analyseurs;

import java_cup.runtime.*;
import ava.arbreAbstrait.*;
import java.util.LinkedList;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 16 20:46:52 CET 2010
  */
public class ParserAva extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserAva() {super();}

  /** Constructor which sets the default scanner. */
  public ParserAva(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserAva(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\003\005\000\002\002" +
    "\005\000\002\005\002\000\002\005\004\000\002\006\005" +
    "\000\002\006\005\000\002\004\003\000\002\004\005\000" +
    "\002\007\002\000\002\007\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\011\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\004\000\002" +
    "\012\005\000\002\012\003\000\002\012\003\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\012\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\014\007\000\002\014\011\000\002\015\007\000\002\013" +
    "\004\000\002\016\010\000\002\016\010\000\002\016\010" +
    "\000\002\016\010\000\002\016\010\000\002\016\010\000" +
    "\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\004\005\001\002\000\004\002\166\001" +
    "\002\000\004\052\164\001\002\000\024\002\ufffe\005\007" +
    "\006\011\010\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\053" +
    "\ufffe\001\002\000\004\053\015\001\002\000\020\002\ufff8" +
    "\010\031\015\023\016\021\017\034\020\026\053\024\001" +
    "\002\000\004\053\015\001\002\000\024\002\ufffe\005\007" +
    "\006\011\010\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\053" +
    "\ufffe\001\002\000\020\002\ufffd\010\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\053\ufffd\001\002\000\004\031\020\001" +
    "\002\000\006\031\ufffa\032\016\001\002\000\004\053\015" +
    "\001\002\000\004\031\ufff9\001\002\000\024\002\ufffb\005" +
    "\ufffb\006\ufffb\010\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\053\ufffb\001\002\000\004\053\161\001\002\000\026\002" +
    "\ufff8\007\ufff8\010\031\011\ufff8\013\ufff8\015\023\016\021" +
    "\017\034\020\026\053\024\001\002\000\020\025\052\033" +
    "\045\044\046\045\047\050\053\053\044\054\050\001\002" +
    "\000\004\030\152\001\002\000\004\031\151\001\002\000" +
    "\006\031\uffd1\033\134\001\002\000\004\031\133\001\002" +
    "\000\004\031\132\001\002\000\020\025\052\033\045\044" +
    "\046\045\047\050\053\053\044\054\050\001\002\000\004" +
    "\031\122\001\002\000\004\031\121\001\002\000\004\033" +
    "\036\001\002\000\004\002\000\001\002\000\010\021\041" +
    "\022\040\023\037\001\002\000\004\032\116\001\002\000" +
    "\004\032\113\001\002\000\004\032\042\001\002\000\020" +
    "\025\052\033\045\044\046\045\047\050\053\053\044\054" +
    "\050\001\002\000\044\012\uffe2\014\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\031\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\046\uffe2\047\uffe2" +
    "\001\002\000\044\012\uffef\014\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\031\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\046\uffef\047\uffef\001" +
    "\002\000\020\025\052\033\045\044\046\045\047\050\053" +
    "\053\044\054\050\001\002\000\044\012\uffe7\014\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\046" +
    "\uffe7\047\uffe7\001\002\000\044\012\uffe6\014\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\031\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\046\uffe6" +
    "\047\uffe6\001\002\000\044\012\ufff0\014\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\031\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\046\ufff0\047" +
    "\ufff0\001\002\000\036\024\060\025\066\026\062\027\057" +
    "\034\110\035\061\036\065\037\064\040\070\041\071\042" +
    "\063\043\056\046\067\047\055\001\002\000\020\025\052" +
    "\033\045\044\046\045\047\050\053\053\044\054\050\001" +
    "\002\000\020\025\052\033\045\044\046\045\047\050\053" +
    "\053\044\054\050\001\002\000\044\012\uffe3\014\uffe3\024" +
    "\060\025\066\026\062\027\057\031\uffe3\034\uffe3\035\061" +
    "\036\065\037\064\040\070\041\071\042\063\043\056\046" +
    "\uffe3\047\uffe3\001\002\000\020\025\052\033\045\044\046" +
    "\045\047\050\053\053\044\054\050\001\002\000\020\025" +
    "\052\033\045\044\046\045\047\050\053\053\044\054\050" +
    "\001\002\000\020\025\052\033\045\044\046\045\047\050" +
    "\053\053\044\054\050\001\002\000\020\025\052\033\045" +
    "\044\046\045\047\050\053\053\044\054\050\001\002\000" +
    "\020\025\052\033\045\044\046\045\047\050\053\053\044" +
    "\054\050\001\002\000\020\025\052\033\045\044\046\045" +
    "\047\050\053\053\044\054\050\001\002\000\020\025\052" +
    "\033\045\044\046\045\047\050\053\053\044\054\050\001" +
    "\002\000\020\025\052\033\045\044\046\045\047\050\053" +
    "\053\044\054\050\001\002\000\020\025\052\033\045\044" +
    "\046\045\047\050\053\053\044\054\050\001\002\000\020" +
    "\025\052\033\045\044\046\045\047\050\053\053\044\054" +
    "\050\001\002\000\020\025\052\033\045\044\046\045\047" +
    "\050\053\053\044\054\050\001\002\000\020\025\052\033" +
    "\045\044\046\045\047\050\053\053\044\054\050\001\002" +
    "\000\020\025\052\033\045\044\046\045\047\050\053\053" +
    "\044\054\050\001\002\000\044\012\uffdd\014\uffdd\024\060" +
    "\025\066\026\062\027\057\031\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\056\046\uffdd" +
    "\047\uffdd\001\002\000\044\012\uffdf\014\uffdf\024\060\025" +
    "\066\026\062\027\057\031\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\056\046\uffdf\047" +
    "\uffdf\001\002\000\044\012\uffe4\014\uffe4\024\060\025\066" +
    "\026\062\027\057\031\uffe4\034\uffe4\035\061\036\065\037" +
    "\064\040\070\041\071\042\063\043\056\046\uffe4\047\055" +
    "\001\002\000\044\012\uffed\014\uffed\024\uffed\025\uffed\026" +
    "\062\027\057\031\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\056\046\uffed\047\uffed\001" +
    "\002\000\044\012\uffdc\014\uffdc\024\060\025\066\026\062" +
    "\027\057\031\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\056\046\uffdc\047\uffdc\001\002" +
    "\000\044\012\uffde\014\uffde\024\060\025\066\026\062\027" +
    "\057\031\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\056\046\uffde\047\uffde\001\002\000" +
    "\044\012\uffe0\014\uffe0\024\060\025\066\026\062\027\057" +
    "\031\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\056\046\uffe0\047\uffe0\001\002\000\044" +
    "\012\uffeb\014\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\056\046\uffeb\047\uffeb\001\002\000\044\012" +
    "\uffe1\014\uffe1\024\060\025\066\026\062\027\057\031\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\056\046\uffe1\047\uffe1\001\002\000\044\012\uffee" +
    "\014\uffee\024\uffee\025\uffee\026\062\027\057\031\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\056\046\uffee\047\uffee\001\002\000\044\012\uffec\014" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\031\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\056\046\uffec\047\uffec\001\002\000\044\012\uffea\014\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\031\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\046\uffea\047\uffea\001\002\000\044\012\uffe5\014\uffe5\024" +
    "\060\025\066\026\062\027\057\031\uffe5\034\uffe5\035\061" +
    "\036\065\037\064\040\070\041\071\042\063\043\056\046" +
    "\uffe5\047\uffe5\001\002\000\044\012\uffe9\014\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\031\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\046\uffe9" +
    "\047\uffe9\001\002\000\004\031\uffd4\001\002\000\036\024" +
    "\060\025\066\026\062\027\057\034\112\035\061\036\065" +
    "\037\064\040\070\041\071\042\063\043\056\046\067\047" +
    "\055\001\002\000\044\012\uffe8\014\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\031\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\046\uffe8\047\uffe8" +
    "\001\002\000\020\025\052\033\045\044\046\045\047\050" +
    "\053\053\044\054\050\001\002\000\036\024\060\025\066" +
    "\026\062\027\057\034\115\035\061\036\065\037\064\040" +
    "\070\041\071\042\063\043\056\046\067\047\055\001\002" +
    "\000\004\031\uffd7\001\002\000\004\052\117\001\002\000" +
    "\004\034\120\001\002\000\004\031\uffd2\001\002\000\026" +
    "\002\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\053\ufff5\001\002\000\026\002\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\013\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\053\ufff6\001\002\000\036\012\124\024\060" +
    "\025\066\026\062\027\057\035\061\036\065\037\064\040" +
    "\070\041\071\042\063\043\056\046\067\047\055\001\002" +
    "\000\022\007\ufff8\010\031\011\ufff8\015\023\016\021\017" +
    "\034\020\026\053\024\001\002\000\006\007\126\011\127" +
    "\001\002\000\004\031\uffdb\001\002\000\020\007\ufff8\010" +
    "\031\015\023\016\021\017\034\020\026\053\024\001\002" +
    "\000\004\007\131\001\002\000\004\031\uffda\001\002\000" +
    "\026\002\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\053\ufff2\001\002\000\026\002" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\053\ufff4\001\002\000\010\021\137\022" +
    "\136\023\135\001\002\000\004\032\146\001\002\000\004" +
    "\032\143\001\002\000\004\032\140\001\002\000\020\025" +
    "\052\033\045\044\046\045\047\050\053\053\044\054\050" +
    "\001\002\000\036\024\060\025\066\026\062\027\057\034" +
    "\142\035\061\036\065\037\064\040\070\041\071\042\063" +
    "\043\056\046\067\047\055\001\002\000\004\031\uffd5\001" +
    "\002\000\020\025\052\033\045\044\046\045\047\050\053" +
    "\053\044\054\050\001\002\000\036\024\060\025\066\026" +
    "\062\027\057\034\145\035\061\036\065\037\064\040\070" +
    "\041\071\042\063\043\056\046\067\047\055\001\002\000" +
    "\004\031\uffd6\001\002\000\004\052\147\001\002\000\004" +
    "\034\150\001\002\000\004\031\uffd3\001\002\000\026\002" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\053\ufff3\001\002\000\020\025\052\033" +
    "\045\044\046\045\047\050\053\053\044\054\050\001\002" +
    "\000\036\024\060\025\066\026\062\027\057\031\ufff1\035" +
    "\061\036\065\037\064\040\070\041\071\042\063\043\056" +
    "\046\067\047\055\001\002\000\036\014\155\024\060\025" +
    "\066\026\062\027\057\035\061\036\065\037\064\040\070" +
    "\041\071\042\063\043\056\046\067\047\055\001\002\000" +
    "\020\010\031\013\ufff8\015\023\016\021\017\034\020\026" +
    "\053\024\001\002\000\004\013\157\001\002\000\004\031" +
    "\uffd9\001\002\000\012\002\ufff7\007\ufff7\011\ufff7\013\ufff7" +
    "\001\002\000\004\031\uffd8\001\002\000\004\031\163\001" +
    "\002\000\024\002\ufffc\005\ufffc\006\ufffc\010\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\053\ufffc\001\002\000\004\031" +
    "\165\001\002\000\024\002\uffff\005\uffff\006\uffff\010\uffff" +
    "\015\uffff\016\uffff\017\uffff\020\uffff\053\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\007\006\011\001\001" +
    "\000\004\004\161\001\001\000\020\007\034\010\021\011" +
    "\031\013\024\014\032\015\026\016\027\001\001\000\004" +
    "\004\013\001\001\000\006\005\012\006\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\157\010\021\011\031\013\024" +
    "\014\032\015\026\016\027\001\001\000\006\012\153\017" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\122\017\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\050\017\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\110\017\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\106\017\042\001\001\000\006\012\053\017\042" +
    "\001\001\000\002\001\001\000\006\012\105\017\042\001" +
    "\001\000\006\012\104\017\042\001\001\000\006\012\103" +
    "\017\042\001\001\000\006\012\102\017\042\001\001\000" +
    "\006\012\101\017\042\001\001\000\006\012\100\017\042" +
    "\001\001\000\006\012\077\017\042\001\001\000\006\012" +
    "\076\017\042\001\001\000\006\012\075\017\042\001\001" +
    "\000\006\012\074\017\042\001\001\000\006\012\073\017" +
    "\042\001\001\000\006\012\072\017\042\001\001\000\006" +
    "\012\071\017\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\113" +
    "\017\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\124\010\021\011\031\013\024\014\032\015\026\016\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\127\010\021\011\031\013\024\014\032\015\026\016\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\140\017" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\143\017\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\152\017\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\155\010\021" +
    "\011\031\013\024\014\032\015\026\016\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserAva$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserAva$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserAva$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

private boolean erreurSyntaxique;
private String messageErreur;

/** Redéfinition de la méthode parse() pour levée de 
  * ParserException() en cas d'erreur syntaxique.
  * @throws ParserException en cas d'erreur syntaxique.
  */ 
public Symbol parse() throws Exception, ParserException {
   Symbol s = null;
   try {    
     s = super.parse();
   } catch (Exception e) {
   	   if (this.erreurSyntaxique)
     	      throw new ParserException(this.messageErreur); 
           else throw e;
   }
   return s;
} 

/** Redéfinition de syntax_error() pour qu'elle affiche
  * le symbole courant.
  */
public void syntax_error(Symbol symboleCourant) {
    this.erreurSyntaxique = true;
    this.messageErreur = "erreur syntaxique sur le symbole " 
    + ((Symbole)symboleCourant).getRepresentationTextuelle() 
    + " ligne " + (symboleCourant.left + 1) 
    + " colonne " + (symboleCourant.right + 1);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserAva$actions {
  private final ParserAva parser;

  /** Constructor */
  CUP$ParserAva$actions(ParserAva parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserAva$do_action(
    int                        CUP$ParserAva$act_num,
    java_cup.runtime.lr_parser CUP$ParserAva$parser,
    java.util.Stack            CUP$ParserAva$stack,
    int                        CUP$ParserAva$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserAva$result;

      /* select the action based on the action number */
      switch (CUP$ParserAva$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // impression ::= WRITELN 
            {
              Impression RESULT =null;
		 RESULT = new ImpressionSautDeLigne(); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("impression",12, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // impression ::= WRITE PARO FORMATC SEP CHAINE PARF 
            {
              Impression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new ImpressionChaineSansSautDeLigne(s); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("impression",12, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // impression ::= WRITELN PARO FORMATC SEP CHAINE PARF 
            {
              Impression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new ImpressionChaineAvecSautDeLigne(s); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("impression",12, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // impression ::= WRITE PARO FORMATI SEP expr PARF 
            {
              Impression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new ImpressionEntierSansSautDeLigne(e); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("impression",12, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // impression ::= WRITELN PARO FORMATI SEP expr PARF 
            {
              Impression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new ImpressionEntierAvecSautDeLigne(e); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("impression",12, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // impression ::= WRITELN PARO FORMATB SEP expr PARF 
            {
              Impression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new ImpressionBooleenAvecSautDeLigne(e); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("impression",12, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // impression ::= WRITE PARO FORMATB SEP expr PARF 
            {
              Impression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new ImpressionBooleenSansSautDeLigne(e); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("impression",12, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lecture ::= READ IDENT 
            {
              Lecture RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Lecture(s); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("lecture",9, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boucle ::= WHILE expr LOOP listeInstruction DONE 
            {
              Boucle RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		ListeInstruction li = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new Boucle(e,li); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("boucle",11, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond ::= IF expr THEN listeInstruction ELSE listeInstruction FI 
            {
              Conditionnelle RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)).value;
		int alorsleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).left;
		int alorsright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).right;
		ListeInstruction alors = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).value;
		int sinonleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int sinonright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		ListeInstruction sinon = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new ConditionnelleAvecAlternative(e,alors,sinon); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= IF expr THEN listeInstruction FI 
            {
              Conditionnelle RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		ListeInstruction i = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new ConditionnelleSimple(e,i); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("cond",10, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparaison ::= expr DIFF expr 
            {
              Comparaison RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Different(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("comparaison",13, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparaison ::= expr INFEGAL expr 
            {
              Comparaison RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new InferieurOuEgal(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("comparaison",13, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparaison ::= expr INF expr 
            {
              Comparaison RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new InferieurStrict(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("comparaison",13, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparaison ::= expr SUP expr 
            {
              Comparaison RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new SuperieurStrict(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("comparaison",13, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparaison ::= expr SUPEGAL expr 
            {
              Comparaison RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new SuperieurOuEgal(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("comparaison",13, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparaison ::= expr EGAL expr 
            {
              Comparaison RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Egal(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("comparaison",13, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= comparaison 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Comparaison c = (Comparaison)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = c; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Negation(e); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Disjonction(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Conjonction(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new ExprFalse(); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new ExprTrue(); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= PARO expr PARF 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = e; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= MOINS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new MoinsUnaire(e); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Modulo(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Division(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Multiplication(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr MOINS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Soustraction(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Addition(e1,e2); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= IDENT 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new IdentExpr(s); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= ENTIER 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Entier(val); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // affectation ::= IDENT AFFECT expr 
            {
              Affectation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Affectation(s,e); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("affectation",7, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= impression FININSTR 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Impression i = (Impression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = i; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= lecture FININSTR 
            {
              Instruction RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Lecture l = (Lecture)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = l; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= boucle FININSTR 
            {
              Instruction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Boucle b = (Boucle)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = b; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= cond FININSTR 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Conditionnelle c = (Conditionnelle)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = c; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= affectation FININSTR 
            {
              Instruction RESULT =null;
		int affleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int affright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Affectation aff = (Affectation)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = aff; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("instruction",6, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listeInstruction ::= instruction listeInstruction 
            {
              ListeInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		ListeInstruction instrs = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 instrs.ajoutInstrEnTete(i); RESULT = instrs; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeInstruction",5, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listeInstruction ::= 
            {
              ListeInstruction RESULT =null;
		 RESULT = new ListeInstruction(); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeInstruction",5, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listeIdent ::= IDENT SEP listeIdent 
            {
              LinkedList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 l.addFirst(s); RESULT = l; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeIdent",2, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listeIdent ::= IDENT 
            {
              LinkedList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(s); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeIdent",2, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= DECLBOOL listeIdent FININSTR 
            {
              ListeDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 ListeDeclaration ldecl = new ListeDeclaration();
      Iterator iterateur = l.iterator();
      while(iterateur.hasNext()) {
	  DeclarationBooleen decl = new DeclarationBooleen((String)iterateur.next());
 	  ldecl.ajoutDeclEnQueue(decl);
      }
      RESULT=ldecl;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= DECLINT listeIdent FININSTR 
            {
              ListeDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		   ListeDeclaration ldecl = new ListeDeclaration();
      Iterator iterateur = l.iterator();
      while(iterateur.hasNext()) {
	  DeclarationEntier decl = new DeclarationEntier((String)iterateur.next());
 	  ldecl.ajoutDeclEnQueue(decl);
      }
      RESULT = ldecl;

              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listeDeclaration ::= declaration listeDeclaration 
            {
              ListeDeclaration RESULT =null;
		int decl1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int decl1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		ListeDeclaration decl1 = (ListeDeclaration)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		int listedecl2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int listedecl2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		ListeDeclaration listedecl2 = (ListeDeclaration)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 decl1.concat(listedecl2); RESULT=decl1; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeDeclaration",3, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listeDeclaration ::= 
            {
              ListeDeclaration RESULT =null;
		 RESULT = new ListeDeclaration(); 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("listeDeclaration",3, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entete ::= PROG CHAINE FININSTR 
            {
              String RESULT =null;
		int chaineleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int chaineright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = chaine; 
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("entete",0, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programme ::= entete listeDeclaration listeInstruction 
            {
              Programme RESULT =null;
		int chaineleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int chaineright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int ldeclleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int ldeclright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		ListeDeclaration ldecl = (ListeDeclaration)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		int linstrleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).left;
		int linstrright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()).right;
		ListeInstruction linstr = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.peek()).value;
		 RESULT = new Programme(chaine,ldecl,linstr);  
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("programme",1, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programme EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Programme start_val = (Programme)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		RESULT = start_val;
              CUP$ParserAva$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)), ((java_cup.runtime.Symbol)CUP$ParserAva$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserAva$parser.done_parsing();
          return CUP$ParserAva$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

