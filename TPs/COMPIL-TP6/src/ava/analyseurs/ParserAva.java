
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 02 16:30:34 CET 2010
//----------------------------------------------------

package ava.analyseurs;

import java_cup.runtime.*;
import ava.arbreAbstrait.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Thu Dec 02 16:30:34 CET 2010
  */
public class ParserAva extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserAva() {super();}

  /** Constructor which sets the default scanner. */
  public ParserAva(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\003\005\000\002\004" +
    "\005\000\002\011\002\000\002\011\004\000\002\012\005" +
    "\000\002\012\005\000\002\010\003\000\002\010\005\000" +
    "\002\013\002\000\002\013\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\005\006\000\002\014\005\000\002\016\010" +
    "\000\002\016\012\000\002\020\011\000\002\020\011\000" +
    "\002\020\011\000\002\020\011\000\002\020\011\000\002" +
    "\020\011\000\002\020\004\000\002\017\010\000\002\006" +
    "\003\000\002\006\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\006" +
    "\004\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\004\007\005\001\002\000\004\002\175\001" +
    "\002\000\004\004\173\001\002\000\024\002\ufffe\005\ufffe" +
    "\010\010\011\011\012\ufffe\016\ufffe\017\ufffe\023\ufffe\027" +
    "\ufffe\001\002\000\024\002\ufffe\005\ufffe\010\010\011\011" +
    "\012\ufffe\016\ufffe\017\ufffe\023\ufffe\027\ufffe\001\002\000" +
    "\004\005\164\001\002\000\004\005\164\001\002\000\020" +
    "\002\ufff8\005\015\012\013\016\024\017\020\023\023\027" +
    "\014\001\002\000\004\005\161\001\002\000\020\005\037" +
    "\006\042\032\041\044\045\050\040\051\043\054\046\001" +
    "\002\000\004\013\151\001\002\000\026\002\ufff4\005\ufff4" +
    "\012\ufff4\016\ufff4\017\ufff4\023\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\031\ufff4\001\002\000\026\002\ufff5\005\ufff5\012\ufff5" +
    "\016\ufff5\017\ufff5\023\ufff5\025\ufff5\026\ufff5\027\ufff5\031" +
    "\ufff5\001\002\000\006\014\131\032\130\001\002\000\026" +
    "\002\ufff2\005\ufff2\012\ufff2\016\ufff2\017\ufff2\023\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\031\ufff2\001\002\000\026\002\ufff3" +
    "\005\ufff3\012\ufff3\016\ufff3\017\ufff3\023\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\031\ufff3\001\002\000\020\005\037\006\042" +
    "\032\041\044\045\050\040\051\043\054\046\001\002\000" +
    "\004\032\031\001\002\000\004\002\000\001\002\000\026" +
    "\002\ufff6\005\ufff6\012\ufff6\016\ufff6\017\ufff6\023\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\031\ufff6\001\002\000\026\002\ufff8" +
    "\005\015\012\013\016\024\017\020\023\023\025\ufff8\026" +
    "\ufff8\027\014\031\ufff8\001\002\000\012\002\ufff7\025\ufff7" +
    "\026\ufff7\031\ufff7\001\002\000\010\020\034\021\033\022" +
    "\032\001\002\000\004\015\113\001\002\000\004\015\107" +
    "\001\002\000\004\015\035\001\002\000\020\005\037\006" +
    "\042\032\041\044\045\050\040\051\043\054\046\001\002" +
    "\000\044\014\uffd7\024\uffd7\030\uffd7\033\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\052\uffd7\053\uffd7\001\002\000" +
    "\044\014\uffe5\024\uffe5\030\uffe5\033\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\052\uffe5\053\uffe5\001\002\000\044" +
    "\014\uffdd\024\uffdd\030\uffdd\033\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\052\uffdd\053\uffdd\001\002\000\020\005" +
    "\037\006\042\032\041\044\045\050\040\051\043\054\046" +
    "\001\002\000\044\014\uffe4\024\uffe4\030\uffe4\033\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\052\uffe4\053\uffe4\001" +
    "\002\000\044\014\uffdc\024\uffdc\030\uffdc\033\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\052\uffdc\053\uffdc\001\002" +
    "\000\036\033\103\035\055\036\060\037\063\040\053\041" +
    "\056\042\064\043\054\044\061\045\057\046\051\047\052" +
    "\052\062\053\050\001\002\000\020\005\037\006\042\032" +
    "\041\044\045\050\040\051\043\054\046\001\002\000\020" +
    "\005\037\006\042\032\041\044\045\050\040\051\043\054" +
    "\046\001\002\000\044\014\uffd9\024\uffd9\030\uffd9\033\uffd9" +
    "\035\055\036\060\037\063\040\053\041\056\042\064\043" +
    "\054\044\061\045\057\046\051\047\052\052\uffd9\053\uffd9" +
    "\001\002\000\020\005\037\006\042\032\041\044\045\050" +
    "\040\051\043\054\046\001\002\000\020\005\037\006\042" +
    "\032\041\044\045\050\040\051\043\054\046\001\002\000" +
    "\020\005\037\006\042\032\041\044\045\050\040\051\043" +
    "\054\046\001\002\000\020\005\037\006\042\032\041\044" +
    "\045\050\040\051\043\054\046\001\002\000\020\005\037" +
    "\006\042\032\041\044\045\050\040\051\043\054\046\001" +
    "\002\000\020\005\037\006\042\032\041\044\045\050\040" +
    "\051\043\054\046\001\002\000\020\005\037\006\042\032" +
    "\041\044\045\050\040\051\043\054\046\001\002\000\020" +
    "\005\037\006\042\032\041\044\045\050\040\051\043\054" +
    "\046\001\002\000\020\005\037\006\042\032\041\044\045" +
    "\050\040\051\043\054\046\001\002\000\020\005\037\006" +
    "\042\032\041\044\045\050\040\051\043\054\046\001\002" +
    "\000\020\005\037\006\042\032\041\044\045\050\040\051" +
    "\043\054\046\001\002\000\020\005\037\006\042\032\041" +
    "\044\045\050\040\051\043\054\046\001\002\000\020\005" +
    "\037\006\042\032\041\044\045\050\040\051\043\054\046" +
    "\001\002\000\044\014\uffd5\024\uffd5\030\uffd5\033\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\054" +
    "\044\061\045\057\046\051\047\052\052\uffd5\053\uffd5\001" +
    "\002\000\044\014\uffd2\024\uffd2\030\uffd2\033\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\054\044" +
    "\061\045\057\046\051\047\052\052\uffd2\053\uffd2\001\002" +
    "\000\044\014\uffda\024\uffda\030\uffda\033\uffda\035\055\036" +
    "\060\037\063\040\053\041\056\042\064\043\054\044\061" +
    "\045\057\046\051\047\052\052\uffda\053\050\001\002\000" +
    "\044\014\uffe2\024\uffe2\030\uffe2\033\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\057\046\051\047\052\052\uffe2\053\uffe2\001\002\000\044" +
    "\014\uffd1\024\uffd1\030\uffd1\033\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\054\044\061\045\057" +
    "\046\051\047\052\052\uffd1\053\uffd1\001\002\000\044\014" +
    "\uffe0\024\uffe0\030\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\052\052\uffe0\053\uffe0\001\002\000\044\014\uffd3" +
    "\024\uffd3\030\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\054\044\061\045\057\046\051" +
    "\047\052\052\uffd3\053\uffd3\001\002\000\044\014\uffd6\024" +
    "\uffd6\030\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\054\044\061\045\057\046\051\047" +
    "\052\052\uffd6\053\uffd6\001\002\000\044\014\uffe3\024\uffe3" +
    "\030\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\057\046\051\047\052" +
    "\052\uffe3\053\uffe3\001\002\000\044\014\uffd4\024\uffd4\030" +
    "\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\054\044\061\045\057\046\051\047\052\052" +
    "\uffd4\053\uffd4\001\002\000\044\014\uffdf\024\uffdf\030\uffdf" +
    "\033\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\052\uffdf" +
    "\053\uffdf\001\002\000\044\014\uffe1\024\uffe1\030\uffe1\033" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\052\052\uffe1\053" +
    "\uffe1\001\002\000\044\014\uffdb\024\uffdb\030\uffdb\033\uffdb" +
    "\035\055\036\060\037\063\040\053\041\056\042\064\043" +
    "\054\044\061\045\057\046\051\047\052\052\uffdb\053\uffdb" +
    "\001\002\000\044\014\uffd8\024\uffd8\030\uffd8\033\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\052\uffd8\053\uffd8\001" +
    "\002\000\004\014\104\001\002\000\026\002\uffea\005\uffea" +
    "\012\uffea\016\uffea\017\uffea\023\uffea\025\uffea\026\uffea\027" +
    "\uffea\031\uffea\001\002\000\036\033\106\035\055\036\060" +
    "\037\063\040\053\041\056\042\064\043\054\044\061\045" +
    "\057\046\051\047\052\052\062\053\050\001\002\000\044" +
    "\014\uffde\024\uffde\030\uffde\033\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\052\uffde\053\uffde\001\002\000\020\005" +
    "\037\006\042\032\041\044\045\050\040\051\043\054\046" +
    "\001\002\000\036\033\111\035\055\036\060\037\063\040" +
    "\053\041\056\042\064\043\054\044\061\045\057\046\051" +
    "\047\052\052\062\053\050\001\002\000\004\014\112\001" +
    "\002\000\026\002\uffed\005\uffed\012\uffed\016\uffed\017\uffed" +
    "\023\uffed\025\uffed\026\uffed\027\uffed\031\uffed\001\002\000" +
    "\004\004\114\001\002\000\004\033\115\001\002\000\004" +
    "\014\116\001\002\000\026\002\uffe8\005\uffe8\012\uffe8\016" +
    "\uffe8\017\uffe8\023\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8" +
    "\001\002\000\036\024\120\035\055\036\060\037\063\040" +
    "\053\041\056\042\064\043\054\044\061\045\057\046\051" +
    "\047\052\052\062\053\050\001\002\000\022\005\015\012" +
    "\013\016\024\017\020\023\023\025\ufff8\026\ufff8\027\014" +
    "\001\002\000\006\025\122\026\123\001\002\000\020\005" +
    "\015\012\013\016\024\017\020\023\023\026\ufff8\027\014" +
    "\001\002\000\004\014\124\001\002\000\026\002\uffef\005" +
    "\uffef\012\uffef\016\uffef\017\uffef\023\uffef\025\uffef\026\uffef" +
    "\027\uffef\031\uffef\001\002\000\004\026\126\001\002\000" +
    "\004\014\127\001\002\000\026\002\uffee\005\uffee\012\uffee" +
    "\016\uffee\017\uffee\023\uffee\025\uffee\026\uffee\027\uffee\031" +
    "\uffee\001\002\000\010\020\134\021\133\022\132\001\002" +
    "\000\026\002\uffe7\005\uffe7\012\uffe7\016\uffe7\017\uffe7\023" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\001\002\000\004" +
    "\015\145\001\002\000\004\015\141\001\002\000\004\015" +
    "\135\001\002\000\020\005\037\006\042\032\041\044\045" +
    "\050\040\051\043\054\046\001\002\000\036\033\137\035" +
    "\055\036\060\037\063\040\053\041\056\042\064\043\054" +
    "\044\061\045\057\046\051\047\052\052\062\053\050\001" +
    "\002\000\004\014\140\001\002\000\026\002\uffeb\005\uffeb" +
    "\012\uffeb\016\uffeb\017\uffeb\023\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\031\uffeb\001\002\000\020\005\037\006\042\032\041" +
    "\044\045\050\040\051\043\054\046\001\002\000\036\033" +
    "\143\035\055\036\060\037\063\040\053\041\056\042\064" +
    "\043\054\044\061\045\057\046\051\047\052\052\062\053" +
    "\050\001\002\000\004\014\144\001\002\000\026\002\uffec" +
    "\005\uffec\012\uffec\016\uffec\017\uffec\023\uffec\025\uffec\026" +
    "\uffec\027\uffec\031\uffec\001\002\000\004\004\146\001\002" +
    "\000\004\033\147\001\002\000\004\014\150\001\002\000" +
    "\026\002\uffe9\005\uffe9\012\uffe9\016\uffe9\017\uffe9\023\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\031\uffe9\001\002\000\020\005" +
    "\037\006\042\032\041\044\045\050\040\051\043\054\046" +
    "\001\002\000\036\014\153\035\055\036\060\037\063\040" +
    "\053\041\056\042\064\043\054\044\061\045\057\046\051" +
    "\047\052\052\062\053\050\001\002\000\026\002\ufff1\005" +
    "\ufff1\012\ufff1\016\ufff1\017\ufff1\023\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\031\ufff1\001\002\000\036\030\155\035\055\036" +
    "\060\037\063\040\053\041\056\042\064\043\054\044\061" +
    "\045\057\046\051\047\052\052\062\053\050\001\002\000" +
    "\020\005\015\012\013\016\024\017\020\023\023\027\014" +
    "\031\ufff8\001\002\000\004\031\157\001\002\000\004\014" +
    "\160\001\002\000\026\002\uffe6\005\uffe6\012\uffe6\016\uffe6" +
    "\017\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6\001" +
    "\002\000\004\014\162\001\002\000\026\002\ufff0\005\ufff0" +
    "\012\ufff0\016\ufff0\017\ufff0\023\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\031\ufff0\001\002\000\004\014\167\001\002\000\006" +
    "\014\ufffa\015\165\001\002\000\004\005\164\001\002\000" +
    "\004\014\ufff9\001\002\000\024\002\ufffb\005\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\016\ufffb\017\ufffb\023\ufffb\027\ufffb\001" +
    "\002\000\004\014\171\001\002\000\024\002\ufffc\005\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\016\ufffc\017\ufffc\023\ufffc\027" +
    "\ufffc\001\002\000\020\002\ufffd\005\ufffd\012\ufffd\016\ufffd" +
    "\017\ufffd\023\ufffd\027\ufffd\001\002\000\004\014\174\001" +
    "\002\000\024\002\uffff\005\uffff\010\uffff\011\uffff\012\uffff" +
    "\016\uffff\017\uffff\023\uffff\027\uffff\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\006\003\003\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\011\012\006\001\001" +
    "\000\006\011\171\012\006\001\001\000\004\010\167\001" +
    "\001\000\004\010\162\001\001\000\020\005\025\013\024" +
    "\014\016\015\026\016\015\017\020\020\021\001\001\000" +
    "\002\001\001\000\006\006\153\007\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\116" +
    "\007\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\025\013\027\014\016\015\026" +
    "\016\015\017\020\020\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\043\007\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\104" +
    "\007\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\101\007\035\001\001\000\006" +
    "\006\046\007\035\001\001\000\002\001\001\000\006\006" +
    "\100\007\035\001\001\000\006\006\077\007\035\001\001" +
    "\000\006\006\076\007\035\001\001\000\006\006\075\007" +
    "\035\001\001\000\006\006\074\007\035\001\001\000\006" +
    "\006\073\007\035\001\001\000\006\006\072\007\035\001" +
    "\001\000\006\006\071\007\035\001\001\000\006\006\070" +
    "\007\035\001\001\000\006\006\067\007\035\001\001\000" +
    "\006\006\066\007\035\001\001\000\006\006\065\007\035" +
    "\001\001\000\006\006\064\007\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\107\007\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\025\013\120\014\016" +
    "\015\026\016\015\017\020\020\021\001\001\000\002\001" +
    "\001\000\020\005\025\013\124\014\016\015\026\016\015" +
    "\017\020\020\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\135\007\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\141\007\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\151\007\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\025\013\155\014\016" +
    "\015\026\016\015\017\020\020\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserAva$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserAva$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserAva$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

private boolean erreurSyntaxique;
private String messageErreur;

/** RedÃ©finition de la mÃ©thode parse() pour levÃ©e de 
  * ParserException() en cas d'erreur syntaxique.
  * @throws ParserException en cas d'erreur syntaxique.
  */ 
public Symbol parse() throws Exception, ParserException {
   Symbol s = null;
   try {    
     s = super.parse();
   } catch (Exception e) {
   	   if (this.erreurSyntaxique)
     	      throw new ParserException(this.messageErreur); 
           else throw e;
   }
   return s;
} 

/** RedÃ©finition de syntax_error() pour qu'elle affiche
  * le symbole courant.
  */
public void syntax_error(Symbol symboleCourant) {
    this.erreurSyntaxique = true;
    this.messageErreur = "erreur syntaxique sur le symbole " 
    + ((Symbole)symboleCourant).getRepresentationTextuelle() 
    + " ligne " + (symboleCourant.left + 1) 
    + " colonne " + (symboleCourant.right + 1);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserAva$actions {
  private final ParserAva parser;

  /** Constructor */
  CUP$ParserAva$actions(ParserAva parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserAva$do_action(
    int                        CUP$ParserAva$act_num,
    java_cup.runtime.lr_parser CUP$ParserAva$parser,
    java.util.Stack            CUP$ParserAva$stack,
    int                        CUP$ParserAva$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserAva$result;

      /* select the action based on the action number */
      switch (CUP$ParserAva$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparaison ::= expr DIFF expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Different(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(5/*comparaison*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparaison ::= expr INFS expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new InferieurStrict(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(5/*comparaison*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparaison ::= expr INFE expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new InferieurOuEgal(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(5/*comparaison*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparaison ::= expr SUPS expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new SuperieurStrict(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(5/*comparaison*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparaison ::= expr SUPE expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new SuperieurOuEgal(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(5/*comparaison*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparaison ::= expr EGAL expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Egal(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(5/*comparaison*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= comparaison 
            {
              Expression RESULT = null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression cmp = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = cmp; 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= MOINS expr 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new MoinsUnaire(e); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= NOT expr 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Negation(e); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr OR expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Disjonction(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr AND expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Conjonction(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= FALSE 
            {
              Expression RESULT = null;
		 RESULT = new ExprFalse(); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= TRUE 
            {
              Expression RESULT = null;
		 RESULT = new ExprTrue(); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= PARENTO expr PARENTF 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = e; 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr MOD expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Modulo(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr DIV expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Division(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr MULT expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Multiplication(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr MOINS expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Soustraction(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr PLUS expr 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Addition(e1,e2); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= ENTIER 
            {
              Expression RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new Entier(i); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= IDENT 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = new IdentExpr(s); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boucle ::= WHILE expr LOOP listeInstr ENDLOOP FININSTR 
            {
              Boucle RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		ListeInstruction l = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		 RESULT = new Boucle(e,l); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(13/*boucle*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ecriture ::= WRITELN FININSTR 
            {
              Impression RESULT = null;
		 RESULT = new ImpressionSautDeLigne(); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(14/*ecriture*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ecriture ::= WRITE PARENTO FORIMPSTR SEPVAR CHAINE PARENTF FININSTR 
            {
              Impression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		 RESULT = new ImpressionChaineSansSautDeLigne(s); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(14/*ecriture*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ecriture ::= WRITELN PARENTO FORIMPSTR SEPVAR CHAINE PARENTF FININSTR 
            {
              Impression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		 RESULT = new ImpressionChaineAvecSautDeLigne(s); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(14/*ecriture*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ecriture ::= WRITE PARENTO FORIMPINT SEPVAR expr PARENTF FININSTR 
            {
              Impression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		 RESULT = new ImpressionEntierSansSautDeLigne(e); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(14/*ecriture*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ecriture ::= WRITELN PARENTO FORIMPINT SEPVAR expr PARENTF FININSTR 
            {
              Impression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		 RESULT = new ImpressionEntierAvecSautDeLigne(e); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(14/*ecriture*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ecriture ::= WRITELN PARENTO FORIMPBOOL SEPVAR expr PARENTF FININSTR 
            {
              Impression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		 RESULT = new ImpressionBooleenAvecSautDeLigne(e); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(14/*ecriture*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ecriture ::= WRITE PARENTO FORIMPBOOL SEPVAR expr PARENTF FININSTR 
            {
              Impression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		 RESULT = new ImpressionBooleenSansSautDeLigne(e); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(14/*ecriture*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condition ::= IF expr THEN listeInstr ELSE listeInstr ENDIF FININSTR 
            {
              Conditionnelle RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-6)).value;
		int lalorsleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)).left;
		int lalorsright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)).right;
		ListeInstruction lalors = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)).value;
		int lsinonleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int lsinonright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		ListeInstruction lsinon = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		 RESULT = new ConditionnelleAvecAlternative(e,lalors,lsinon); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(12/*condition*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condition ::= IF expr THEN listeInstr ENDIF FININSTR 
            {
              Conditionnelle RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		ListeInstruction l = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		 RESULT = new ConditionnelleSimple(e,l); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(12/*condition*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lect ::= READ IDENT FININSTR 
            {
              Lecture RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new Lecture(id); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(10/*lect*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // affect ::= IDENT AFF expr FININSTR 
            {
              Affectation RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 RESULT = new Affectation(s,e); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(3/*affect*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= boucle 
            {
              Instruction RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Boucle b = (Boucle)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = b; 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(11/*instr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= ecriture 
            {
              Instruction RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Impression e = (Impression)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = e; 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(11/*instr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr ::= condition 
            {
              Instruction RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Conditionnelle c = (Conditionnelle)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = c; 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(11/*instr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instr ::= lect 
            {
              Instruction RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Lecture l = (Lecture)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = l; 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(11/*instr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instr ::= affect 
            {
              Instruction RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		Affectation a = (Affectation)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 RESULT = a; 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(11/*instr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listeInstr ::= instr listeInstr 
            {
              ListeInstruction RESULT = null;
		int inleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Instruction in = (Instruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		ListeInstruction l = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 l.ajoutInstrEnTete(in);
					RESULT = l;
				
              CUP$ParserAva$result = new java_cup.runtime.Symbol(9/*listeInstr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listeInstr ::= 
            {
              ListeInstruction RESULT = null;
		 RESULT = new ListeInstruction(); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(9/*listeInstr*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listeIdent ::= IDENT SEPVAR listeIdent 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 	
	l.addFirst(s);
	RESULT = l;

              CUP$ParserAva$result = new java_cup.runtime.Symbol(6/*listeIdent*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listeIdent ::= IDENT 
            {
              LinkedList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		
	RESULT = new LinkedList();
	RESULT.add(id);

              CUP$ParserAva$result = new java_cup.runtime.Symbol(6/*listeIdent*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= DECLBOOL listeIdent FININSTR 
            {
              ListeDeclaration RESULT = null;
		int identsleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int identsright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		LinkedList idents = (LinkedList)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 
	ListeDeclaration ldecl = new ListeDeclaration();
	Iterator iterateur = idents.iterator();
	while (iterateur.hasNext()) {
		ldecl.ajoutDeclEnQueue(new DeclarationBooleen((String)iterateur.next()));
}
	RESULT = ldecl;

              CUP$ParserAva$result = new java_cup.runtime.Symbol(8/*decl*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= DECLINT listeIdent FININSTR 
            {
              ListeDeclaration RESULT = null;
		int identsleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int identsright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		LinkedList idents = (LinkedList)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 
	ListeDeclaration ldecl = new ListeDeclaration();
	Iterator iterateur = idents.iterator();
	while (iterateur.hasNext()) { 
		ldecl.ajoutDeclEnQueue(new DeclarationEntier((String)iterateur.next()));
	}
	RESULT = ldecl;

              CUP$ParserAva$result = new java_cup.runtime.Symbol(8/*decl*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listeDecl ::= decl listeDecl 
            {
              ListeDeclaration RESULT = null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		ListeDeclaration declaration = (ListeDeclaration)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		ListeDeclaration l = (ListeDeclaration)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 
	declaration.concat(l);
	RESULT = declaration;

              CUP$ParserAva$result = new java_cup.runtime.Symbol(7/*listeDecl*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listeDecl ::= 
            {
              ListeDeclaration RESULT = null;
		 RESULT = new ListeDeclaration(); 
              CUP$ParserAva$result = new java_cup.runtime.Symbol(7/*listeDecl*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entete ::= PROG CHAINE FININSTR 
            {
              String RESULT = null;
		int chaineleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int chaineright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		 
	RESULT = chaine;

              CUP$ParserAva$result = new java_cup.runtime.Symbol(2/*entete*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= entete listeDecl listeInstr 
            {
              Programme RESULT = null;
		int chaineleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left;
		int chaineright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).right;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		ListeDeclaration ld = (ListeDeclaration)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right;
		ListeInstruction li = (ListeInstruction)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).value;
		 
	RESULT = new Programme(chaine,
		ld,
		li); 

              CUP$ParserAva$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          return CUP$ParserAva$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).right;
		Programme start_val = (Programme)((java_cup.runtime.Symbol) CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).value;
		RESULT = start_val;
              CUP$ParserAva$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserAva$stack.elementAt(CUP$ParserAva$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserAva$parser.done_parsing();
          return CUP$ParserAva$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

