/*****************************************************
 * Description pour Cup d'une grammaire specifique a AVA
 * TP4 - COMPiL - Specification faîte au TP2 Modifiée pour le TP4
 *
 * 7/10/10 - Revu le 27/10/10 - 12/11/10 
 * F. Bellano
 *
 *****************************************************/

package ava.analyseurs;

import java_cup.runtime.*;
import ava.arbreAbstrait.*;
import java.util.*;

parser code {: 

private boolean erreurSyntaxique;
private String messageErreur;

/** Redéfinition de la méthode parse() pour levée de 
  * ParserException() en cas d'erreur syntaxique.
  * @throws ParserException en cas d'erreur syntaxique.
  */ 
public Symbol parse() throws Exception, ParserException {
   Symbol s = null;
   try {    
     s = super.parse();
   } catch (Exception e) {
   	   if (this.erreurSyntaxique)
     	      throw new ParserException(this.messageErreur); 
           else throw e;
   }
   return s;
} 

/** Redéfinition de syntax_error() pour qu'elle affiche
  * le symbole courant.
  */
public void syntax_error(Symbol symboleCourant) {
    this.erreurSyntaxique = true;
    this.messageErreur = "erreur syntaxique sur le symbole " 
    + ((Symbole)symboleCourant).getRepresentationTextuelle() 
    + " ligne " + (symboleCourant.left + 1) 
    + " colonne " + (symboleCourant.right + 1);
}

:} // parser code


/* terminaux (symboles retournés par l'analyseur lexical) */
terminal String CHAINE, IDENT;
terminal Integer ENTIER;
terminal PROG,DECLINT,DECLBOOL,READ,AFF,FININSTR;
terminal SEPVAR,WRITE,WRITELN,FORIMPINT,FORIMPBOOL,FORIMPSTR;
terminal String IF, THEN, ELSE, ENDIF, WHILE, LOOP, ENDLOOP;
terminal PARENTO,PARENTF;
terminal UNAIRE;
terminal String EGAL, DIFF, INFS, SUPS, INFE, SUPE, PLUS, MOINS,  DIV,  MULT, MOD;
terminal String TRUE, FALSE;
terminal String OR, AND, NOT;

/* non-terminaux de la grammaire */
non terminal Programme program;
non terminal String entete;
non terminal Affectation affect;
non terminal Expression expr, comparaison;
non terminal LinkedList listeIdent;
non terminal ListeDeclaration listeDecl , decl;
non terminal ListeInstruction listeInstr;
non terminal Lecture lect;
non terminal Instruction instr;
non terminal Conditionnelle condition;
non terminal Boucle boucle;
non terminal Impression ecriture;

/* la grammaire */

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left EGAL, SUPE, SUPS, INFS, INFE, DIFF;
precedence left PLUS, MOINS;
precedence left DIV, MULT;
precedence left MOD;
precedence left UNAIRE;


start with program;

program ::= entete:chaine listeDecl:ld listeInstr:li
{: 
	RESULT = new Programme(chaine,
		ld,
		li); 
:}
;

entete ::= PROG CHAINE:chaine FININSTR 
{: 
	RESULT = chaine;
:}
;

listeDecl ::= /* MOT VIDE */ {: RESULT = new ListeDeclaration(); :}
	| decl:declaration listeDecl:l
{: 
	declaration.concat(l);
	RESULT = declaration;
:}
;

decl ::= DECLINT listeIdent:idents FININSTR
{: 
	ListeDeclaration ldecl = new ListeDeclaration();
	Iterator iterateur = idents.iterator();
	while (iterateur.hasNext()) { 
		ldecl.ajoutDeclEnQueue(new DeclarationEntier((String)iterateur.next()));
	}
	RESULT = ldecl;
:}
	| DECLBOOL listeIdent:idents FININSTR
{: 
	ListeDeclaration ldecl = new ListeDeclaration();
	Iterator iterateur = idents.iterator();
	while (iterateur.hasNext()) {
		ldecl.ajoutDeclEnQueue(new DeclarationBooleen((String)iterateur.next()));
}
	RESULT = ldecl;
:}
;

listeIdent ::= IDENT:id
{:
	RESULT = new LinkedList();
	RESULT.add(id);
:}
	| IDENT:s SEPVAR listeIdent:l
{: 	
	l.addFirst(s);
	RESULT = l;
:}
;


listeInstr ::= {: RESULT = new ListeInstruction(); :}
	| instr:in listeInstr:l {: l.ajoutInstrEnTete(in);
					RESULT = l;
				:}
;

instr ::= affect:a {: RESULT = a; :} 
	| lect:l {: RESULT = l; :}
	| condition:c {: RESULT = c; :}
	| ecriture:e {: RESULT = e; :}
	| boucle:b {: RESULT = b; :}
;

affect ::= IDENT:s AFF expr:e FININSTR
	{: RESULT = new Affectation(s,e); :}
;

lect ::= READ IDENT:id FININSTR {: RESULT = new Lecture(id); :}
;

condition ::= IF expr:e THEN listeInstr:l ENDIF FININSTR {: RESULT = new ConditionnelleSimple(e,l); :}
	| IF expr:e THEN listeInstr:lalors ELSE listeInstr:lsinon ENDIF FININSTR {: RESULT = new ConditionnelleAvecAlternative(e,lalors,lsinon); :}
;

ecriture ::= WRITE PARENTO FORIMPBOOL SEPVAR expr:e PARENTF FININSTR {: RESULT = new ImpressionBooleenSansSautDeLigne(e); :}
	   | WRITELN PARENTO FORIMPBOOL SEPVAR expr:e PARENTF FININSTR {: RESULT = new ImpressionBooleenAvecSautDeLigne(e); :}
	   | WRITELN PARENTO FORIMPINT SEPVAR expr:e PARENTF FININSTR {: RESULT = new ImpressionEntierAvecSautDeLigne(e); :}
	   | WRITE PARENTO FORIMPINT SEPVAR expr:e PARENTF FININSTR   {: RESULT = new ImpressionEntierSansSautDeLigne(e); :}
	   | WRITELN PARENTO FORIMPSTR SEPVAR CHAINE:s PARENTF FININSTR {: RESULT = new ImpressionChaineAvecSautDeLigne(s); :}
	   | WRITE PARENTO FORIMPSTR SEPVAR CHAINE:s PARENTF FININSTR  {: RESULT = new ImpressionChaineSansSautDeLigne(s); :}
	   | WRITELN FININSTR {: RESULT = new ImpressionSautDeLigne(); :}
;

boucle ::= WHILE expr:e LOOP listeInstr:l ENDLOOP FININSTR {: RESULT = new Boucle(e,l); :}
;

expr ::=  IDENT:s {: RESULT = new IdentExpr(s); :}
	| ENTIER:i {: RESULT = new Entier(i); :}
	| expr:e1 PLUS expr:e2 {: RESULT = new Addition(e1,e2); :}
	| expr:e1 MOINS expr:e2 {: RESULT = new Soustraction(e1,e2); :}
	| expr:e1 MULT expr:e2 {: RESULT = new Multiplication(e1,e2); :}
	| expr:e1 DIV expr:e2 {: RESULT = new Division(e1,e2); :}
	| expr:e1 MOD expr:e2 {: RESULT = new Modulo(e1,e2); :}
	| PARENTO expr:e PARENTF {: RESULT = e; :}
	| TRUE  {: RESULT = new ExprTrue(); :}
	| FALSE {: RESULT = new ExprFalse(); :}
	| expr:e1 AND expr:e2 {: RESULT = new Conjonction(e1,e2); :} 
	| expr:e1 OR expr:e2 {: RESULT = new Disjonction(e1,e2); :}
	| NOT expr:e {: RESULT = new Negation(e); :} 	
	| MOINS expr:e {: RESULT = new MoinsUnaire(e); :} %prec UNAIRE
	| comparaison:cmp {: RESULT = cmp; :}
;

comparaison ::= expr:e1 EGAL expr:e2 {: RESULT = new Egal(e1,e2); :}
	| expr:e1 SUPE expr:e2 {: RESULT = new SuperieurOuEgal(e1,e2); :} 
	| expr:e1 SUPS expr:e2 {: RESULT = new SuperieurStrict(e1,e2); :}
	| expr:e1 INFE expr:e2 {: RESULT = new InferieurOuEgal(e1,e2); :}
	| expr:e1 INFS expr:e2 {: RESULT = new InferieurStrict(e1,e2); :}
	| expr:e1 DIFF expr:e2 {: RESULT = new Different(e1,e2); :}
;

